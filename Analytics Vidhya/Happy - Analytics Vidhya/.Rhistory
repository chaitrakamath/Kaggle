itemCnt.mat <- with (cpdtrUnique, {
out <- matrix(nrow = nlevels(USER_ID_hash), ncol = nlevels(COUPON_ID_hash),
dimnames = list(levels(USER_ID_hash), levels(COUPON_ID_hash)))
out[cbind(USER_ID_hash, COUPON_ID_hash)] <- ITEM_COUNT
out
})
cpdtr <- read.csv("/Users/Jaan/Documents/KaggleCompetitions/CouponsRecommender/Data/coupon_detail_train.csv")
str(cpdtr)
#Remove columns that are not to be used
cpdtr$I_DATE = NULL
cpdtr$SMALL_AREA_NAME = NULL
cpdtr$PURCHASEID_hash = NULL
str(cpdtr)
#Rearrange columns and remove dups, if any
cpdtr <- cpdtr[c(2, 3, 1)]
cpdtrUnique <- unique(cpdtr)
str(cpdtrUnique)
#Convert data frame into matrix
itemCnt.mat <- with (cpdtrUnique, {
out <- matrix(nrow = nlevels(USER_ID_hash), ncol = nlevels(COUPON_ID_hash),
dimnames = list(levels(USER_ID_hash), levels(COUPON_ID_hash)))
out[cbind(USER_ID_hash, COUPON_ID_hash)] <- ITEM_COUNT
out
})
str(itemCnt.mat)
dimnames(itemCnt.mat)
head(itemCnt.mat)
getwd()
setwd('/Users/Jaan/Documents/KaggleCompetitions/Happy/')
getwd()
rm(list = ls())
train <- read.csv('train.csv')
test <- read.csv('test.csv')
alcoholConsumption <- read.csv('NewVariable_Alcohol.csv')
str(train)
str(test)
str(alcoholConsumption)
#merge train and test data sets
test$Happy <- NA
allWithoutAlcohol <- rbind(train, test)
all <- merge(allWithoutAlcohol, alcoholConsumption, by.x = 'ID', by.y = 'ID')
str(all)
#MISSING VALUE IMPUTATIONS
#Impute missing WorkStatus with Other
all$WorkStatus <- ifelse(is.na(all$WorkStatus), 'Other', all$WorkStatus)
all$WorkStatus <- as.factor(all$WorkStatus)
#Impute Divorced status as 'Unmarried'
all$Divorce <- as.character(all$Divorce)
all$Divorce[is.na(all$Divorce)] <- 'Unmarried'
all$Divorce <- as.factor(all$Divorce)
#Impute Widowed Status as 'Unmarried'
all$Widowed <- as.character(all$Widowed)
all$Widowed[is.na(all$Widowed)] <-  'Unmarried'
all$Widowed <- as.factor(all$Widowed)
#Impute missing values of Score by predicting on decision tree
library(rpart)
library(rpart.plot)
decisionTree_Score <- rpart(Score ~ Var1 + WorkStatus + Divorce + Widowed + Education + Residence_Region +
babies + preteen + teens + income + Engagement_Religion + Var2 +
Gender + Unemployed10 + Happy, data = all, method = 'anova')
all[is.na(all$Score), 'Score'] <- round(predict(decisionTree_Score, all[is.na(all$Score), ]))
#Impute missing education values by creating decision tree on all other variables
decisionTree_Education <- rpart(Education ~ . - ID, data = all, method = 'anova')
prp(decisionTree_Education)
all$Education[is.na(all$Education)] <- round(predict(decisionTree_Education, all[is.na(all$Education), ]))
#Impute missing value for Var1 based on most frequent value across residence_region
tapply(all$Var1, all$Residence_Region, function(x) names(which.max(table(x))))
all$Var1 <- as.character(all$Var1)
all$Var1[is.na(all$Var1) & all$Residence_Region == 'new england'] <- 'B'
all$Var1[is.na(all$Var1) & all$Residence_Region %in%
c('e. sou. central', 'middle atlantic', 'w. nor. central', 'w. sou. central')] <- 'A'
all$Var1[is.na(all$Var1) & all$Residence_Region %in%
c ('e. nor. central', 'foreign', 'mountain', 'pacific', 'south atlantic')] <- 'G'
all$Var1 <- as.factor(all$Var1)
#Impute missing number of babies as 0
all$babies[is.na(all$babies)] <- 0
#Impute missing number of preteens and teens as 0
all$preteen[is.na(all$preteen)] <- 0
all$teens[is.na(all$teens)] <- 0
#Impute missing values of income
tapply(all$income, list(all$Education, all$Residence_Region), function(x) names(which.max(table(x))))
all$income[is.na(all$income) & all$Residence_Region == 'e. nor. central' & all$Education > 7] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'e. sou. central' & all$Education > 11] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'foreign' & all$Education > 1 & all$Education != 4 & all$Education != 7] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region %in% c('middle atlantic', 'south atlantic') & all$Education > 7] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region %in% c('mountain', 'new england') & all$Education > 9] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'pacific' & all$Education > 6] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'w. nor. central' & all$Education > 10] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'w. sou. central' & all$Education > 9] <- '$25000 or more'
tapply(all$income, all$Residence_Region, function(x) (length(x[is.na(x)]))) #look for regions with more missing values left out
all$income[is.na(all$income) & all$Residence_Region == 'south atlantic' & all$Education %in% c(2, 4)] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'south atlantic' & all$Education %in% c(3, 6, 7)] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'south atlantic' & all$Education == 5] <- '$8000 to 9999'
all$income[is.na(all$income) & all$Residence_Region == 'w. sou. central' & all$Education %in% c(6, 9)] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'w. sou. central' & all$Education == 3] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'w. sou. central' & all$Education == 7] <- '$7000 to 7999'
all$income[is.na(all$income) & all$Residence_Region == 'w. sou. central' & all$Education == 8] <- '$8000 to 9999'
all$income[is.na(all$income) & all$Residence_Region == 'e. sou. central' & all$Education %in% c(7, 10)] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'e. sou. central' & all$Education %in% c(0, 6)] <- '$6000 to 6999'
all$income[is.na(all$income) & all$Residence_Region == 'e. sou. central' & all$Education %in% c(4, 9, 8, 11)] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'e. sou. central' & all$Education == 3] <- '$5000 to 5999'
all$income[is.na(all$income) & all$Residence_Region == 'foreign' & all$Education == 0] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'foreign' & all$Education == 4] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'foreign' & all$Education == 7] <- '$20000 - 24999'
all$income[is.na(all$income) & all$Residence_Region == 'new england' & all$Education %in% c(7, 8) ] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'new england' & all$Education == 5] <- '$5000 to 5999'
all$income[is.na(all$income) & all$Residence_Region == 'new england' & all$Education == 9] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'w. nor. central' & all$Education %in% c(10, 8) ] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'w. nor. central' & all$Education == 6 ] <- '$5000 to 5999'
all$income[is.na(all$income) & all$Residence_Region == 'w. nor. central' & all$Education == 9 ] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'middle atlantic' & all$Education ==  2] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'middle atlantic' & all$Education ==  3] <- 'lt $1000'
all$income[is.na(all$income) & all$Residence_Region == 'middle atlantic' & all$Education ==  6] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'middle atlantic' & all$Education ==  7] <- '$15000 - 19999'
all$income[is.na(all$income) & all$Residence_Region == 'mountain' & all$Education ==  8] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'mountain' & all$Education ==  5] <- '$1000 to 2999'
all$income[is.na(all$income) & all$Residence_Region == 'pacific' & all$Education ==  2] <- '$25000 or more'
all$income[is.na(all$income) & all$Residence_Region == 'pacific' & all$Education ==  6] <- '$10000 - 14999'
all$income[is.na(all$income) & all$Residence_Region == 'e. nor. central' & all$Education %in% c(5, 6)] <- '$25000 or more'
all$income <- as.factor(all$income)
#impute engagement_religion with most frequent value: never
all$Engagement_Religion[is.na(all$Engagement_Religion)] <- 'never'
all$Engagement_Religion <- as.factor(all$Engagement_Religion)
#impute TVhours using decision tree
decisionTree_tvhours <- rpart(TVhours ~ . - ID, data = all, method = 'anova')
prp(decisionTree_tvhours)
all$TVhours[is.na(all$TVhours)] <- round(predict(decisionTree_tvhours, newdata = all[is.na(all$TVhours), ]))
#impute unemployed using decision tree
decisionTree_unemployed <- rpart(Unemployed10 ~ . - ID, data = all)
prp(decisionTree_unemployed)
unemp_prob <- predict(decisionTree_unemployed, newdata = all[is.na(all$Unemployed10), ])
all$Unemployed10[is.na(all$Unemployed10)] <- ifelse(unemp_prob < 0.5, 0, 1)
#impute alcohol consumption using decision tree
decisionTree_alcohol <- rpart(Alcohol_Consumption ~ . - ID, data = all)
prp(decisionTree_alcohol)
all$Alcohol_Consumption[all$Alcohol_Consumption == ""] <- predict(decisionTree_alcohol, newdata = all[all$Alcohol_Consumption == "", ], type = 'class')
#Convert all factor variables to dummy variables
dummies <- model.matrix(~ Var1 + WorkStatus + Divorce + Widowed + income + Engagement_Religion + Alcohol_Consumption - 1,
data = all)
allData <- cbind(all[, sapply(all, function(x) !is.factor(x))], dummies, Happy = all$Happy)
#Create column names
colnames(allData) <- make.names(colnames(allData))
#split train and test data
train <- subset(allData, !is.na(all$Happy))
test <- subset(allData, is.na(all$Happy))
test$Happy <- NULL
#split train and test without dummies
trainWithoutDummies <- subset(all, !is.na(all$Happy))
testWithoutDummies <- subset(all, is.na(all$Happy))
test$Happy <- NULL
#Create correlation matrix
library(caret)
train_dummies <- model.matrix(~ Happy - 1, data = train)
allTrainDummies <- cbind(train, train_dummies)
allTrainDummies$Happy <- NULL
library(randomForest)
trainWithoutDummies$Unemployed10 <- as.factor(trainWithoutDummies$Unemployed10)
rfModel2 <- randomForest(Happy ~ Alcohol_Consumption * Divorce * WorkStatus * income * Var2 * Unemployed10 * Widowed, data = trainWithoutDummies,
mtry = 2, ntree = 1000, cutoff = c(0.1, 0.7, 0.2), importance = TRUE)
varImpPlot(rfModel2)
rfClasses <- predict(rfModel2, newdata = test, type = 'class')
rfClasses <- predict(rfModel2, newdata = testWithoutDummies, type = 'class')
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
colnames(testWithoutDummies[, colnames(testWithoutDummies) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')])
rfClasses <- predict(rfModel2, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
names(rfModel2)
rfModel2$forest
names(rfModel2)
rfModel2$terms
rfModel3 <- randomForest(Happy ~ Alcohol_Consumption + Divorce + WorkStatus + income + Var2 + Unemployed10 + Widowed, data = trainWithoutDummies,
mtry = 2, ntree = 1000, cutoff = c(0.1, 0.7, 0.2), importance = TRUE)
rfClasses <- predict(rfModel3, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
testWithoutDummies$Unemployed10 <- as.factor(testWithoutDummies$Unemployed10)
rfClasses <- predict(rfModel3, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
str(rfClasses)
rfClasses <- as.data.frame(predict(rfModel3, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class'))
str(rfClasses)
head(as.factor(rfClasses))
rfClasses <- predict(rfModel3, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
head(as.factor(rfClasses))
submission <- data.frame(ID = test$ID, Happy = as.factor(rfClasses))
str(submission)
write.csv(submission, 'rfModel.csv', row.names = FALSE)
rfModel3 <- randomForest(Happy ~ Alcohol_Consumption + Divorce + WorkStatus + income + Var2 + Unemployed10 + Widowed, data = trainWithoutDummies,
mtry = 2, ntree = 1000, cutoff = c(0.2, 0.7, 0.1), importance = TRUE)
rfClasses <- predict(rfModel3, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
submission <- data.frame(ID = test$ID, Happy = as.factor(rfClasses))
write.csv(submission, 'rfModel.csv', row.names = FALSE)
rfModel3 <- randomForest(Happy ~ Alcohol_Consumption + Divorce + WorkStatus + income + Var2 + Unemployed10 + Widowed, data = trainWithoutDummies,
mtry = 2, ntree = 1000)
rfClasses <- predict(rfModel3, newdata = testWithoutDummies[, colnames(testWithoutDummies) %in%
c('Alcohol_Consumption', 'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')], type = 'class')
#submission file
submission <- data.frame(ID = test$ID, Happy = as.factor(rfClasses))
write.csv(submission, 'rfModel.csv', row.names = FALSE)
getwd()
setwd('/Users/Jaan/Documents/KaggleCompetitions/Happy/')
getwd()
rm(list = ls())
train <- read.csv('train.csv')
test <- read.csv('test.csv')
alcoholConsumption <- read.csv('NewVariable_Alcohol.csv')
str(train)
str(test)
str(alcoholConsumption)
test$Happy <- NA
allWithoutAlcohol <- rbind(train, test)
all <- merge(allWithoutAlcohol, alcoholConsumption, by.x = 'ID', by.y = 'ID')
str(all)
#simple rf model
library(randomForest)
train$Unemployed10 <- as.factor(train$Unemployed10)
test$Unemployed10 <- as.factor(test$Unemployed10)
tuneRF(x = train[, colnames(train) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')],
y = train$Happy, ntreeTry = 1000)
all[is.na(all)] <- -1
#split train and test
train <- subset(all, !is.na(all$Happy))
tuneRF(x = train[, colnames(train) %in% c('Alcohol_Consumption',
'Engagement_Religion')],
y = train$Happy, ntreeTry = 1000)
?randomForest
tuneRF(x = train[, colnames(train) %in% c('Alcohol_Consumption',
'Engagement_Religion')],
y = train$Happy, ntreeTry = 1000, na.action = na.omit(x = train[, colnames(train) %in% c('Alcohol_Consumption',
'Engagement_Religion')]))
colnames(all[is.na(all), sapply(all, function(x) is.factor(x))])
head(all[is.na(all), sapply(all, function(x) is.factor(x))])
all[is.na(all), sapply(all, function(x) is.factor(x))] <- 'dummy'
getwd()
setwd('/Users/Jaan/Documents/KaggleCompetitions/Happy/')
getwd()
rm(list = ls())
train <- read.csv('train.csv')
test <- read.csv('test.csv')
alcoholConsumption <- read.csv('NewVariable_Alcohol.csv')
str(train)
str(test)
str(alcoholConsumption)
#merge train and test data sets
test$Happy <- NA
allWithoutAlcohol <- rbind(train, test)
all <- merge(allWithoutAlcohol, alcoholConsumption, by.x = 'ID', by.y = 'ID')
str(all)
all$Alcohol_Consumption[is.na(all$Alcohol_Consumption)] <- 'dummy'
all$Divorce[is.na(all$Divorce)] <- 'dummy'
all$WorkStatus[is.na(all$WorkStatus)] <- 'dummy'
all$income[is.na(all$income)] <- 'dummy'
all$Var2[is.na(all$Var2)] <- 'dummy'
all$Widowed[is.na(all$Widowed)] <- 'dummy'
getwd()
setwd('/Users/Jaan/Documents/KaggleCompetitions/Happy/')
getwd()
rm(list = ls())
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv', stringsAsFactors = FALSE)
alcoholConsumption <- read.csv('NewVariable_Alcohol.csv', stringsAsFactors = FALSE)
test$Happy <- NA
allWithoutAlcohol <- rbind(train, test)
all <- merge(allWithoutAlcohol, alcoholConsumption, by.x = 'ID', by.y = 'ID')
str(all)
all$Alcohol_Consumption[is.na(all$Alcohol_Consumption)] <- 'dummy'
all$Divorce[is.na(all$Divorce)] <- 'dummy'
all$WorkStatus[is.na(all$WorkStatus)] <- 'dummy'
all$income[is.na(all$income)] <- 'dummy'
all$Var2[is.na(all$Var2)] <- 'dummy'
all$Widowed[is.na(all$Widowed)] <- 'dummy'
all$Unemployed10[is.na(all$Unemployed10)] <- 'dummy'
getwd()
setwd('/Users/Jaan/Documents/KaggleCompetitions/Happy/')
getwd()
rm(list = ls())
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv')
alcoholConsumption <- read.csv('NewVariable_Alcohol.csv', stringsAsFactors = FALSE)
str(train)
str(test)
str(alcoholConsumption)
#merge train and test data sets
test$Happy <- NA
allWithoutAlcohol <- rbind(train, test)
all <- merge(allWithoutAlcohol, alcoholConsumption, by.x = 'ID', by.y = 'ID')
str(all)
all$Alcohol_Consumption[is.na(all$Alcohol_Consumption)] <- 'dummy'
all$Divorce[is.na(all$Divorce)] <- 'dummy'
all$WorkStatus[is.na(all$WorkStatus)] <- 'dummy'
all$income[is.na(all$income)] <- 'dummy'
all$Var2[is.na(all$Var2)] <- 'dummy'
all$Widowed[is.na(all$Widowed)] <- 'dummy'
all$Unemployed10[is.na(all$Unemployed10)] <- 'dummy'
all$Alcohol_Consumption <- as.factor(all$Alcohol_Consumption)
all$Divorce <- as.factor(all$Divorce)
all$WorkStatus <- as.factor(all$WorkStatus)
all$income <- as.factor(all$income)
all$Var2 <- as.factor(all$Var2)
all$Widowed <- as.factor(all$Widowed)
train$Unemployed10 <- as.factor(train$Unemployed10)
#split train and test
train <- subset(all, !is.na(all$Happy))
test <- subset(all, is.na(all$Happy))
library(randomForest)
tuneRF(x = train[, colnames(train) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')],
y = train$Happy, ntreeTry = 1000)
train <- subset(all, !is.na(all$Happy))
train$Happy <- as.factor(train$Happy)
test <- subset(all, is.na(all$Happy))
library(randomForest)
tuneRF(x = train[, colnames(train) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')],
y = train$Happy, ntreeTry = 1000)
rfTrain <- train[, colnames(train) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')]
table(is.na(rfTrain))
tuneRF(x = rfTrain ,
y = train$Happy, ntreeTry = 1000)
sapply(rfTrain, function(x) any(is.nan(x)))
sapply(rfTrain, function(x) any(is.infinite(x)))
str(rfTrain)
getwd()
setwd('/Users/Jaan/Documents/KaggleCompetitions/Happy/')
getwd()
rm(list = ls())
train <- read.csv('train.csv', stringsAsFactors = FALSE)
test <- read.csv('test.csv')
alcoholConsumption <- read.csv('NewVariable_Alcohol.csv', stringsAsFactors = FALSE)
str(train)
str(test)
str(alcoholConsumption)
#merge train and test data sets
test$Happy <- NA
allWithoutAlcohol <- rbind(train, test)
all <- merge(allWithoutAlcohol, alcoholConsumption, by.x = 'ID', by.y = 'ID')
str(all)
all$Alcohol_Consumption[is.na(all$Alcohol_Consumption)] <- 'dummy'
all$Divorce[is.na(all$Divorce)] <- 'dummy'
all$WorkStatus[is.na(all$WorkStatus)] <- 'dummy'
all$income[is.na(all$income)] <- 'dummy'
all$Var2[is.na(all$Var2)] <- 'dummy'
all$Widowed[is.na(all$Widowed)] <- 'dummy'
all$Unemployed10[is.na(all$Unemployed10)] <- 'dummy'
all$Alcohol_Consumption <- as.factor(all$Alcohol_Consumption)
all$Divorce <- as.factor(all$Divorce)
all$WorkStatus <- as.factor(all$WorkStatus)
all$income <- as.factor(all$income)
all$Var2 <- as.factor(all$Var2)
all$Widowed <- as.factor(all$Widowed)
all$Unemployed10 <- as.factor(all$Unemployed10)
#split train and test
train <- subset(all, !is.na(all$Happy))
train$Happy <- as.factor(train$Happy)
test <- subset(all, is.na(all$Happy))
library(randomForest)
rfTrain <- train[, colnames(train) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')]
tuneRF(x = rfTrain ,
y = train$Happy, ntreeTry = 1000)
rfModel <- randomForest(Happy ~ . , data = rfTrain, mtry = 1, ntree = 1000)
rfModel <- randomForest(x = rfTrain, y = train$Happy, mtry = 1, ntree = 1000)
print(rfModel)
rfTest <- test[, colnames(test) %in% c('Alcohol_Consumption',
'Divorce', 'WorkStatus', 'income', 'Var2', 'Unemployed10', 'Widowed')]
rfClasses <- predict(rfModel, newdata = rfTest, type = 'class')
submission <- data.frame(ID = test$ID, Happy = rfClasses)
write.csv(submission, 'rfModel.csv', row.names = FALSE)
