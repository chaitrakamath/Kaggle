itemCnt.mat <- with (cpdtrUnique, {
out <- matrix(nrow = nlevels(USER_ID_hash), ncol = nlevels(COUPON_ID_hash),
dimnames = list(levels(USER_ID_hash), levels(COUPON_ID_hash)))
out[cbind(USER_ID_hash, COUPON_ID_hash)] <- ITEM_COUNT
out
})
cpdtr <- read.csv("/Users/Jaan/Documents/KaggleCompetitions/CouponsRecommender/Data/coupon_detail_train.csv")
str(cpdtr)
#Remove columns that are not to be used
cpdtr$I_DATE = NULL
cpdtr$SMALL_AREA_NAME = NULL
cpdtr$PURCHASEID_hash = NULL
str(cpdtr)
#Rearrange columns and remove dups, if any
cpdtr <- cpdtr[c(2, 3, 1)]
cpdtrUnique <- unique(cpdtr)
str(cpdtrUnique)
#Convert data frame into matrix
itemCnt.mat <- with (cpdtrUnique, {
out <- matrix(nrow = nlevels(USER_ID_hash), ncol = nlevels(COUPON_ID_hash),
dimnames = list(levels(USER_ID_hash), levels(COUPON_ID_hash)))
out[cbind(USER_ID_hash, COUPON_ID_hash)] <- ITEM_COUNT
out
})
str(itemCnt.mat)
dimnames(itemCnt.mat)
head(itemCnt.mat)
rm(list = ls())
setwd('/Users/Jaan/Documents/KaggleCompetitions/Titanic')
train <- read.csv('train.csv')
test <- read.csv('test.csv')
#combine train and test
test$Survived <- 'dummy'
data <- rbind(train, test)
#Feature engg: create new interaction feature
data <- cbind(data, model.matrix(~ (Sex +SibSp + Parch)^2 - 1, data = data))
#Feature engg: add feature to extract number of characters in full name
data$NameCount <- nchar(as.character(data$Name))
#Feature engg: add feature extracting last name
data$lastName <- sapply(strsplit(as.character(data$Name), ', '), '[', 1)
#Feature engg: add age_estimated flag column
pattern <- '\\d+.5'
data$ageEstFlag <- ifelse(grepl(pattern, data$Age), 1, 0)
#Scale fare column using modified adjusted score
data$AdjFare <- (data$Fare - median(data$Fare, na.rm = TRUE)) / sd(data$Fare, na.rm = TRUE)
data$Fare <- NULL
#Convert all factor variables to dummy variables
library(caret)
dmy1 <- dummyVars(~ Sex, data = data, fullRank = T)
sex <- predict(dmy1, newdata = data)
dmy2 <- dummyVars(~ Cabin, data = data, fullRank = T)
cabin <- predict(dmy2, newdata = data)
dmy3 <- dummyVars(~ Embarked, data = data, fullRank = T)
embarked<- predict(dmy3, newdata = data)
fullData <- cbind(data, sex,cabin, embarked)
#impute missing values in age and adjusted fare to 0
fullData[is.na(fullData$Age), 'Age'] <- -1
fullData[is.na(fullData$AdjFare), 'AdjFare'] <- median(fullData$AdjFare, na.rm = TRUE)
#remove columns not needed
fullData$Pclass <- NULL
fullData$Ticket <- NULL
fullData$Sex <- NULL
fullData$Cabin <- NULL
fullData$Embarked <- NULL
fullData$lastName <- NULL
#feature selection
#a) Zero Variances
zero.var = nearZeroVar(fullData, saveMetrics=TRUE)
print (zero.var[zero.var$nzv, ])
#remove all zero variance columns
colNums <- as.numeric(rownames(zero.var[zero.var$nzv, ]))
fullData <- fullData[, - colNums]
#Separate test and train data sets
train <- subset(fullData, fullData$Survived != 'dummy')
test <- subset(fullData, fullData$Survived == 'dummy')
train$Survived <- as.factor(train$Survived)
test$Survived <- NULL
colnames(train)
str(train)
table(is.na(fullData))
table(is.finite(fullData))
logModel <- glm(Survived ~ . - (PassengerId + Name), data = train, family = binomial)
logPred <- predict(logModel, newdata = test, type = 'response')
logPred <- predict(logModel, newdata = test[, -c('Name', "PassengerId")], type = 'response')
colnames(test)
logPred <- predict(logModel, newdata = test[, -c(1, 2)], type = 'response')
logPred <- predict(logModel, newdata = test[, - 2], type = 'response')
logModel$xlevels[['Name']] <- union(logModel$xlevels[['Name']], levels(as.factor(test$Name)))
logPred <- predict(logModel, newdata = test, type = 'response')
summary(logPred)
logPred <- predict(logModel, newdata = test, type = 'terms')
summary(logPred)
logPred <- predict(logModel, newdata = test, type = 'response')
summary(logPred)
table(logPred < 0.5)
output <- ifelse(logPred < 0.5, 0, 1)
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
write.csv(submission, 'LogModel.csv', row.names = FALSE)
colnames(train)
library(glmnet)
train$Survived <- as.numeric(train$Survived)
glmModel <- cv.glmnet(x = data.matrix(train[, - c(1, 2, 3)]), y = train[, c('Survived')], family = 'binomial',
type.measure = 'auc')
cv <- cv.glmnet(x = data.matrix(train[, - c(1, 2, 3)]), y = train[, c('Survived')], nfolds = 20)
colnames(test)
glmPred <- data.frame(predict(glmModel, newx = data.matrix(test[, - c(1, 2)]), type = 'response', s = cv$lambda.min))
summary(glmPred)
table(glmPred$X1 < 0.5)
summary(logPred)
output <- ifelse(logPred < 0.4, 0, 1)
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
write.csv(submission, 'LogModel.csv', row.names = FALSE)
library(glmnet)
train$Survived <- as.numeric(train$Survived)
glmModel <- cv.glmnet(x = data.matrix(train[, - c(1, 2, 3)]), y = train[, c('Survived')], family = 'binomial',
type.measure = 'auc')
cv <- cv.glmnet(x = data.matrix(train[, - c(1, 2, 3)]), y = train[, c('Survived')], nfolds = 20)
glmPred <- data.frame(predict(glmModel, newx = data.matrix(test[, - c(1, 2)]), type = 'response', s = cv$lambda.min))
output <- ifelse(glmPred$X1 < 0.4, 0, 1)
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
write.csv(submission, 'GLMNet.csv', row.names = FALSE)
#Create a simple classification model and make predictions
logModel <- glm(Survived ~ . - (PassengerId + Name), data = train, family = binomial)
logModel$xlevels[['Name']] <- union(logModel$xlevels[['Name']], levels(as.factor(test$Name)))
logPred <- predict(logModel, newdata = test, type = 'response')
output <- ifelse(logPred < 0.5, 0, 1)
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
write.csv(submission, 'LogModel.csv', row.names = FALSE)
#-----------------glmnet--------------------------
#Create a glmnet model
library(glmnet)
train$Survived <- as.numeric(train$Survived)
glmModel <- cv.glmnet(x = data.matrix(train[, - c(1, 2, 3)]), y = train[, c('Survived')], family = 'binomial',
type.measure = 'auc')
cv <- cv.glmnet(x = data.matrix(train[, - c(1, 2, 3)]), y = train[, c('Survived')], nfolds = 20)
glmPred <- data.frame(predict(glmModel, newx = data.matrix(test[, - c(1, 2)]), type = 'response', s = cv$lambda.min))
output <- ifelse(glmPred$X1 < 0.5, 0, 1)
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
write.csv(submission, 'GLMNet.csv', row.names = FALSE)
?tune.randomForest
library(randomForest)
install.packages('randomForest')
library(randomForest)
train$Survived <- as.factor(train$Survived)
?tune.randomForest
?tune.randomForest()
?tuneRF
head(train$Name)
matchPattern <- '(\\w+),(\\w+).(\\s*)(\\w+)'
head(grep(matchPattern, train$Name, value = TRUE))
matchPattern <- '(\\w+),(\\w+).(\\s*)'
head(grep(matchPattern, train$Name, value = TRUE))
matchPattern <- '(\\w+)\.'
matchPattern <- '(\\w+)\\.'
head(grep(matchPattern, train$Name, value = TRUE))
tuneRF(x = x, y = y)
y <- train$Survived
tuneRF(x = x, y = y)
x <- train[, -c(1, 2, 3)]
y <- train$Survived
tuneRF(x = x, y = y)
?randomForest
?tuneRF
rfModel <- randomForest(Surivived ~ -(PassengerId + Name), data = train, mtry = 4)
rfModel <- randomForest(Survived ~ -(PassengerId + Name), data = train, mtry = 4)
rfModel <- randomForest(Survived ~ -(PassengerId + Name), data = train, mtry = 4, method = 'class')
library(randomForest)
train$Survived <- as.factor(train$Survived)
x <- train[, -c(1, 2, 3)]
y <- train$Survived
rfModel <- randomForest(Survived ~ .-(PassengerId + Name), data = train, mtry = 4, method = 'class')
colnames(train) <- make.names(colnames(train), unique = TRUE)
tuneRF(x = x, y = y)
rfModel <- randomForest(Survived ~ .-(PassengerId + Name), data = train, mtry = 4, method = 'class')
rfPred <- predict(rfModel, newdata = test[, - c(1, 2)], type = 'response')
rfPred <- predict(rfModel, newdata = test, type = 'response')
colnames(test) <- make.names(colnames(test), unique = TRUE)
rfPred <- predict(rfModel, newdata = test, type = 'response')
summary(rfPred)
str(rrfPred)
str(rfPred)
rfPred <- predict(rfModel, newdata = test)
str(rfPred)
table(output)
install.packages('plyr')
install.packages("plyr")
library(plyr)
output <- revalue(rfPred, c(1 = 0, 2 = 1))
output <- revalue(rfPred, c('1' = '0', '2' = '1'))
summary(output)
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
#gave a score of 0.77512
write.csv(submission, 'RFModel.csv', row.names = FALSE)
rfModel <- randomForest(Survived ~ .-(PassengerId + Name), data = train, method = 'class')
colnames(test) <- make.names(colnames(test), unique = TRUE)
rfPred <- predict(rfModel, newdata = test)
library(plyr)
output <- revalue(rfPred, c('1' = '0', '2' = '1'))
#Create submission file
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
#gave a score of 0.77512
write.csv(submission, 'RFModel.csv', row.names = FALSE)
rfProb <- predict(rfModel, newdata = test, type = 'prob')
summary(rfProb)
str(rfProb)
summary(rfProb[, 1])
summary(rfProb[, 2])
dimnames(rfProb)
str(rfProb)
str(as.data.frame(rfProb))
rfProb <- data.frame(predict(rfModel, newdata = test, type = 'prob'))
str(rfProb)
summary(rfProb[, c('X2')])
predProb <- (logPred + rfProb[, c('X2')])/ 2
summary(predProb)
names(rfPred)
names(rfModel)
rfModel$call
rfModel$type
rfModel$predicted
names(rfModel)
rfModel$err.rate
output <- ifelse(predProb < 0.5, 0, 1)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- output
write.csv(submission, 'RF+LogEnsemble.csv', row.names = FALSE)
rm(list = ls())
setwd('/Users/Jaan/Documents/KaggleCompetitions/Titanic')
train <- read.csv('train.csv')
test <- read.csv('test.csv')
str(train)
table(is.na(train))
train[is.na(train), ]
sapply(train, function(x) any(is.na(x)))
#Remove columns that would not be used
train$Name <- NULL
test$Name <- NULL
train$Ticket <- NULL
test$Ticket <- NULL
sapply(train, function(x) any(is.na(x)))
unique(train$Cabin)
unique(train$Embarked)
table(train$Embarked == "")
sapply(train, function(x) any(x == ""))
sapply(test, function(x) any(is.na(x))) #Age
sapply(train, function(x) any(is.na(x))) #Age
sapply(test, function(x) any(x == ""))
sapply(train, function(x) any(x == "")) #Embarked, Cabin
sapply(train, function(x) any(is.na(x))) #Age
sapply(train, function(x) any(x == "")) #Embarked, Cabin
table(train$Cabin)
train[train$Cabin == "", ]
train[train$Pclass == 3, ]
unique(train[train$Pclass == 3, train$Cabin])
unique(train[train$Pclass == 3, c('Cabin')])
unique(train[train$Pclass == 2, c('Cabin')])
unique(train[train$Pclass == 1, c('Cabin')])
sort(unique(train[train$Pclass == 3, c('Cabin')]))
sort(unique(train[train$Pclass == 2, c('Cabin')]))
sort(unique(train[train$Pclass == 1, c('Cabin')]))
help(family)
test$Survived <- 'dummy'
data <- rbind(train, test)
install.packages('Metrics')
library(e1071)
data("iris")
model <- svm(iris$Species ~ ., data = iris)
predict(model, newdata = iris)
model1 <- svm(Cabin ~ ., data = data)
train$predictedCabin <- predict(model1, newdata = data)
data$predictedCabin <- predict(model1, newdata = data)
summary(predict(model1, newdata = data))
summary(model1)
predict(model1, newdata = data)
str(data)
model1$levels
predict(model1, newdata = data)
?svm
